{
  "name": "tv4",
  "version": "1.0.5",
  "author": {
    "name": "Geraint Luff"
  },
  "description": "A public domain JSON Schema validator for JavaScript",
  "keywords": [
    "json-schema",
    "schema",
    "validator",
    "tv4"
  ],
  "maintainers": [
    {
      "name": "Geraint Luff",
      "email": "luffgd@gmail.com",
      "url": "https://github.com/geraintluff/"
    }
  ],
  "main": "tv4.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/geraintluff/tv4.git"
  },
  "license:": [
    {
      "type": "Public Domain",
      "url": "http://geraintluff.github.io/tv4/LICENSE.txt"
    },
    {
      "type": "MIT",
      "url": "http://jsonary.com/LICENSE.txt"
    }
  ],
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "mocha": "~1.11.0",
    "grunt-mocha": "~0.3.4",
    "grunt-mocha-test": "~0.5.0",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-contrib-copy": "~0.4.1",
    "proclaim": "1.4",
    "mocha-unfunk-reporter": "~0.2",
    "jshint-path-reporter": "~0.1",
    "grunt-concat-sourcemap": "~0.2",
    "source-map-support": "~0.1",
    "grunt-markdown": "~0.3.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "readme": "# Tiny Validator (for v4 JSON Schema)\r\n\r\n[![Build Status](https://secure.travis-ci.org/geraintluff/tv4.png?branch=master)](http://travis-ci.org/geraintluff/tv4) [![Dependency Status](https://gemnasium.com/geraintluff/tv4.png)](https://gemnasium.com/geraintluff/tv4) [![NPM version](https://badge.fury.io/js/tv4.png)](http://badge.fury.io/js/tv4)\r\n\r\nUse [JSON Schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html)).\r\n\r\nThere is support for `$ref` with JSON Pointer fragment paths (```other-schema.json#/properties/myKey```).\r\n\r\n## Usage 1: Simple validation\r\n\r\n```javascript\r\nvar valid = tv4.validate(data, schema);\r\n```\r\n\r\nIf validation returns ```false```, then an explanation of why validation failed can be found in ```tv4.error```.\r\n\r\nThe error object will look something like:\r\n```json\r\n{\r\n    \"code\": 0,\r\n    \"message\": \"Invalid type: string\",\r\n    \"dataPath\": \"/intKey\",\r\n    \"schemaKey\": \"/properties/intKey/type\"\r\n}\r\n```\r\n\r\nThe `\"code\"` property will refer to one of the values in `tv4.errorCodes` - in this case, `tv4.errorCodes.INVALID_TYPE`.\r\n\r\nTo enable external schema to be referenced, you use:\r\n```javascript\r\ntv4.addSchema(url, schema);\r\n```\r\n\r\nIf schemas are referenced (```$ref```) but not known, then validation will return ```true``` and the missing schema(s) will be listed in ```tv4.missing```. For more info see the API documentation below.\r\n\r\n## Usage 2: Multi-threaded validation\r\n\r\nStoring the error and missing schemas does not work well in multi-threaded environments, so there is an alternative syntax:\r\n\r\n```javascript\r\nvar result = tv4.validateResult(data, schema);\r\n```\r\n\r\nThe result will look something like:\r\n```json\r\n{\r\n    \"valid\": false,\r\n    \"error\": {...},\r\n    \"missing\": [...]\r\n}\r\n```\r\n\r\n## Usage 3: Multiple errors\r\n\r\nNormally, `tv4` stops when it encounters the first validation error.  However, you can collect an array of validation errors using:\r\n\r\n```javascript\r\nvar result = tv4.validateMultiple(data, schema);\r\n```\r\n\r\nThe result will look something like:\r\n```json\r\n{\r\n    \"valid\": false,\r\n    \"errors\": [\r\n        {...},\r\n        ...\r\n    ],\r\n    \"missing\": [...]\r\n}\r\n```\r\n\r\n## Asynchronous validation\r\n\r\nSupport for asynchronous validation (where missing schemas are fetched) can be added by including an extra JavaScript file.  Currently, the only version requires jQuery (`tv4.async-jquery.js`), but the code is very short and should be fairly easy to modify for other libraries (such as MooTools).\r\n\r\nUsage:\r\n\r\n```javascript\r\ntv4.validate(data, schema, function (isValid, validationError) { ... });\r\n```\r\n\r\n`validationFailure` is simply taken from `tv4.error`.\r\n\r\n## Cyclical JavaScript objects\r\n\r\nWhile they don't occur in proper JSON, JavaScript does support self-referencing objects. Any of the above calls support an optional final argument, checkRecursive. If true, tv4 will handle self-referencing objects properly - this slows down validation slightly, but that's better than a hanging script.\r\n\r\n```javascript\r\nvar a = {};\r\nvar b = { a: a };\r\na.b = b;\r\nvar aSchema = { properties: { b: { $ref: 'bSchema' }}};\r\nvar bSchema = { properties: { a: { $ref: 'aSchema' }}};\r\ntv4.addSchema('aSchema', aSchema);\r\ntv4.addSchema('bSchema', bSchema);\r\ntv4.validate(a, aSchema, true); // If the final checkRecursive argument were missing, this would throw a \"too much recursion\" error.\r\ntv4.validate(a, schema, asynchronousFunction, true); // Works with asynchronous validation.\r\ntv4.validateResult(data, aSchema, true); // Also multi-threaded and multiple error validation.\r\ntv4.validateMultiple(data, aSchema, true);\r\n```\r\n\r\n## API\r\n\r\nThere are additional api commands available for more complex use-cases:\r\n\r\n##### addSchema(uri, schema)\r\nPre-register a schema for reference by other schema and synchronous validation.\r\n\r\n````js\r\ntv4.addSchema('http://example.com/schema', { ... });\r\n````\r\n\r\n* `uri` the uri to identify this schema.\r\n* `schema` the schema object.\r\n\r\nSchemas that have their `id` property set can be added directly.\r\n\r\n````js\r\ntv4.addSchema({ ... });\r\n````\r\n\r\n##### getSchema(uri)\r\n\r\nReturn a schema from the cache.\r\n\r\n* `uri` the uri of the schema (may contain a `#` fragment)\r\n\r\n````js\r\nvar schema = tv4.getSchema('http://example.com/schema');\r\n````\r\n\r\n##### getSchemaMap()\r\n\r\nReturn a shallow copy of the schema cache, mapping schema document URIs to schema objects.\r\n\r\n````\r\nvar map = tv4.getSchemaMap();\r\n\r\nvar schema = map[uri];\r\n````\r\n\r\n##### getSchemaUris(filter)\r\n\r\nReturn an Array with known schema document URIs.\r\n\r\n* `filter` optional RegExp to filter URIs\r\n\r\n````\r\nvar arr = tv4.getSchemaUris();\r\n\r\n// optional filter using a RegExp\r\nvar arr = tv4.getSchemaUris(/^https?://example.com/);\r\n````\r\n\r\n##### getMissingUris(filter)\r\n\r\nReturn an Array with schema document URIs that are used as `$ref` in known schemas but which currently have no associated schema data.\r\n\r\nUse this in combination with `tv4.addSchema(uri, schema)` to preload the cache for complete synchronous validation with.\r\n\r\n* `filter` optional RegExp to filter URIs\r\n\r\n````\r\nvar arr = tv4.getMissingUris();\r\n\r\n// optional filter using a RegExp\r\nvar arr = tv4.getMissingUris(/^https?://example.com/);\r\n````\r\n\r\n##### dropSchemas()\r\n\r\nDrop all known schema document URIs from the cache.\r\n\r\n````\r\ntv4.dropSchemas();\r\n````\r\n\r\n##### freshApi()\r\n\r\nReturn a new tv4 instance with no shared state.\r\n\r\n````\r\nvar otherTV4 = tv4.freshApi();\r\n````\r\n\r\n##### reset()\r\n\r\nManually reset validation status from the simple `tv4.validate(data, schema)`. Although tv4 will self reset on each validation there are some implementation scenarios where this is useful.\r\n\r\n````\r\ntv4.reset();\r\n````\r\n\r\n##### language(code)\r\n\r\nSelect the language map used for reporting.\r\n\r\n* `code` is a langauge code, like `'en'` or `'en-gb'`\r\n\r\n````\r\ntv4.language('en-gb');\r\n````\r\n\r\n##### addLanguage(code, map)\r\n\r\nAdd a new language map for selection by `tv4.language(code)`\r\n\r\n* `code` is new language code\r\n* `map` is an object mapping error IDs or constant names (e.g. `103` or `\"NUMBER_MAXIMUM\"`) to language strings.\r\n\r\n````\r\ntv4.addLanguage('fr', { ... });\r\n\r\n// select for use\r\ntv4.language('fr')\r\n````\r\n## Demos\r\n\r\n### Basic usage\r\n<div class=\"content\" markdown=\"1\">\r\n<a href=\"javascript:runDemo('demo1');\">run demo</a>\r\n<pre class=\"code\" id=\"demo1\">\r\nvar schema = {\r\n\t\"items\": {\r\n\t\t\"type\": \"boolean\"\r\n\t}\r\n};\r\nvar data1 = [true, false];\r\nvar data2 = [true, 123];\r\n\r\nalert(\"data 1: \" + tv4.validate(data1, schema)); // true\r\nalert(\"data 2: \" + tv4.validate(data2, schema)); // false\r\nalert(\"data 2 error: \" + JSON.stringify(tv4.error, null, 4));\r\n</pre>\r\n</div>\r\n\r\n### Use of <code>$ref</code>\r\n<div class=\"content\">\r\n<a href=\"javascript:runDemo('demo2');\">run demo</a>\r\n<pre class=\"code\" id=\"demo2\">\r\nvar schema = {\r\n\t\"type\": \"array\",\r\n\t\"items\": {\"$ref\": \"#\"}\r\n};\r\nvar data1 = [[], [[]]];\r\nvar data2 = [[], [true, []]];\r\n\r\nalert(\"data 1: \" + tv4.validate(data1, schema)); // true\r\nalert(\"data 2: \" + tv4.validate(data2, schema)); // false\r\n</pre>\r\n</div>\r\n\r\n### Missing schema\r\n<div class=\"content\">\r\n<a href=\"javascript:runDemo('demo3');\">run demo</a>\r\n<pre class=\"code\" id=\"demo3\">\r\nvar schema = {\r\n\t\"type\": \"array\",\r\n\t\"items\": {\"$ref\": \"http://example.com/schema\"}\r\n};\r\nvar data = [1, 2, 3];\r\n\r\nalert(\"Valid: \" + tv4.validate(data, schema)); // true\r\nalert(\"Missing schemas: \" + JSON.stringify(tv4.missing));\r\n</pre>\r\n</div>\r\n\r\n### Referencing remote schema\r\n<div class=\"content\">\r\n<a href=\"javascript:runDemo('demo4');\">run demo</a>\r\n<pre class=\"code\" id=\"demo4\">\r\ntv4.addSchema(\"http://example.com/schema\", {\r\n\t\"definitions\": {\r\n\t\t\"arrayItem\": {\"type\": \"boolean\"}\r\n\t}\r\n});\r\nvar schema = {\r\n\t\"type\": \"array\",\r\n\t\"items\": {\"$ref\": \"http://example.com/schema#/definitions/arrayItem\"}\r\n};\r\nvar data1 = [true, false, true];\r\nvar data2 = [1, 2, 3];\r\n\r\nalert(\"data 1: \" + tv4.validate(data1, schema)); // true\r\nalert(\"data 2: \" + tv4.validate(data2, schema)); // false\r\n</pre>\r\n</div>\r\n\r\n## Supported platforms\r\n\r\n* Node.js\r\n* All modern browsers\r\n* IE >= 8\r\n\r\n## Installation\r\n\r\nYou can manually download [`tv4.js`](https://raw.github.com/geraintluff/tv4/master/tv4.js) or the minified [`tv4.min.js`](https://raw.github.com/geraintluff/tv4/master/tv4.min.js) and include it in your html to create the global `tv4` variable.\r\n\r\nAlternately use it as a CommonJS module:\r\n\r\n````js\r\nvar tv4 = require('tv4').tv4;\r\n````\r\n\r\n#### npm\r\n\r\n````\r\n$ npm install tv4\r\n````\r\n\r\n#### bower\r\n\r\n````\r\n$ bower install tv4\r\n````\r\n\r\n#### component.io\r\n\r\n````\r\n$ component install geraintluff/tv4\r\n````\r\n\r\n## Build and test\r\n\r\nYou can rebuild and run the node and browser tests using node.js and [grunt](http://http://gruntjs.com/):\r\n\r\nMake sure you have the global grunt cli command:\r\n````\r\n$ npm install grunt-cli -g\r\n````\r\n\r\nClone the git repos, open a shell in the root folder and install the development dependencies:\r\n\r\n````\r\n$ npm install\r\n````\r\n\r\nRebuild and run the tests:\r\n````\r\n$ grunt\r\n````\r\n\r\nIt will run a build and display one Spec-style report for the node.js and two Dot-style reports for both the plain and minified browser tests (via phantomJS). You can also use your own browser to manually run the suites by opening [`test/index.html`](http://geraintluff.github.io/tv4/test/index.html) and [`test/index-min.html`](http://geraintluff.github.io/tv4/test/index-min.html).\r\n\r\n## Contributing\r\n\r\nPull-requests for fixes and expansions are welcome. Edit the partial files in `/source` and add your tests in a suitable suite or folder under `/test/tests` and run `grunt` to rebuild and run the test suite. Try to maintain an idiomatic coding style and add tests for any new features. It is recommend to discuss big changes in an Issue.\r\n\r\n## Packages using tv4\r\n\r\n* [chai-json-schema](http://chaijs.com/plugins/chai-json-schema) is a [Chai Assertion Library](http://chaijs.com) plugin to assert values against json-schema.\r\n* [grunt-tv4](http://www.github.com/Bartvds/grunt-tv4) is a plugin for [grunt](http://http://gruntjs.com/) that uses tv4 to bulk validate json files.\r\n\r\n## License\r\n\r\nThe code is available as \"public domain\", meaning that it is completely free to use, without any restrictions at all.  Read the full license [here](http://geraintluff.github.com/tv4/LICENSE.txt).\r\n\r\nIt's also available under an [MIT license](http://jsonary.com/LICENSE.txt).\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/geraintluff/tv4/issues"
  },
  "_id": "tv4@1.0.5",
  "dist": {
    "shasum": "19d1092023ebf25e8c25ed8425947a7042815543"
  },
  "_from": "tv4@~1.0.5",
  "_resolved": "https://registry.npmjs.org/tv4/-/tv4-1.0.5.tgz"
}
