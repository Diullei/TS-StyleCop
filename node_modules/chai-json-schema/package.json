{
  "name": "chai-json-schema",
  "version": "1.0.4",
  "description": "Chai plugin to validate values against IETF standardised json-schema v04",
  "author": {
    "name": "Bart van der Schoor",
    "url": "https://github.com/Bartvds"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Bartvds/chai-json-schema.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/chai-json-schema/blob/master/LICENSE-MIT"
    }
  ],
  "bugs": {
    "url": "https://github.com/Bartvds/chai-json-schema/issues"
  },
  "keywords": [
    "chai",
    "json",
    "assertion",
    "json-schema"
  ],
  "main": "index.js",
  "readmeFilename": "README.md",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "chai": "~1.6.1",
    "grunt-mocha-test": "~0.5.0",
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1",
    "grunt-mocha": "~0.4.0",
    "mocha": "~1.11.0",
    "mocha-unfunk-reporter": "0.2",
    "grunt-contrib-jshint": "~0.6.0",
    "jshint-path-reporter": "~0.1.2"
  },
  "dependencies": {
    "underscore": "~1.4.4",
    "jsonpointer.js": "~0.3.0",
    "tv4": "~1.0.5"
  },
  "readme": "# chai-json-schema\r\n\r\n[![Build Status](https://secure.travis-ci.org/Bartvds/chai-json-schema.png?branch=master)](http://travis-ci.org/Bartvds/chai-json-schema) [![Dependency Status](https://gemnasium.com/Bartvds/chai-json-schema.png)](https://gemnasium.com/Bartvds/chai-json-schema) [![NPM version](https://badge.fury.io/js/chai-json-schema.png)](http://badge.fury.io/js/chai-json-schema)\r\n\r\n> [Chai](http://chaijs.com/) plugin to validate values against IETF standardised [JSON Schema](http://json-schema.org/).\r\n\r\nUse [JSON Schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) as implemented by [Tiny Validator tv4](https://github.com/geraintluff/tv4) to validate both simple values and complex objects with the rich collection of element [validation terms](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html)).\r\n\r\n## Notes\r\n\r\nChai-json-schema will fail also the assertion if a schema has a (`$ref`) referring to a schema that is not added before the assertion is called. Use `chai.tv4.addSchema()` to preset schemas (see below):\r\n\r\nJSON Schema's main use is in validating JSON documents and API responses, but it is also a powerful way to describe and validate *any* JavaScript value or object.\r\n\r\n## Usage\r\n\r\n### browser-side\r\n\r\nInclude chai-json-schema after [Chai](http://chaijs.com/), [Tiny Validator tv4](https://github.com/geraintluff/tv4), [jsonpointer.js](https://github.com/alexeykuzmin/jsonpointer.js/) and [Underscore.js](http://underscorejs.org/):\r\n\r\n    <script src=\"underscore.js\"></script>\r\n    <script src=\"jsonpointer.js\"></script>\r\n    <script src=\"tv4.js\"></script>\r\n    <script src=\"chai.js\"></script>\r\n    <script src=\"chai-json-schema.js\"></script>\r\n\r\n### server-side\r\n\r\nInstall from npm:\r\n\r\n    $ npm install chai-json-schema\r\n\r\nHave chai use the chai-json-schema module:\r\n\r\n    var chai = require('chai');\r\n    chai.use(require('chai-json-schema'));\r\n\r\n## Assertions\r\n\r\n### jsonSchema(value, schema)\r\n\r\nValidate that the given javascript value conforms to the specified JSON Schema. Both the value and schema would likely be JSON loaded from a external datasource but could also be literals or object instances.\r\n\r\n    var good    Apple = {\r\n    \tskin: \"thin\",\r\n    \tcolors: [\"red\", \"green\", \"yellow\"],\r\n    \ttaste: 10\r\n    };\r\n    var badApple = {\r\n    \tcolors: [\"brown\"],\r\n    \ttaste: 0,\r\n    \tworms: 2\r\n    };\r\n    var fruitSchema = {\r\n    \t\"title\": \"fresh fruit schema v1\",\r\n    \t\"type\": \"object\",\r\n    \t\"properties\": {\r\n    \t\t\"required\": [\"skin\", \"colors\", \"taste\"],\r\n    \t\t\"colors\": {\r\n    \t\t\t\"type\": \"array\",\r\n    \t\t\t\"minItems\": 1,\r\n    \t\t\t\"uniqueItems\": true,\r\n    \t\t\t\"items\": {\r\n    \t\t\t\t\"type\": \"string\"\r\n    \t\t\t}\r\n    \t\t},\r\n    \t\t\"skin\": {\r\n    \t\t\t\"type\": \"string\"\r\n    \t\t},\r\n    \t\t\"taste\": {\r\n    \t\t\t\"type\": \"number\",\r\n    \t\t\t\"minimum\": 5\r\n    \t\t}\r\n    \t}\r\n    };\r\n    \r\n    //bdd style\r\n    expect(goodApple).to.be.jsonSchema(fruitSchema);\r\n    expect(badApple).to.not.be.jsonSchema(fruitSchema);\r\n    \r\n    goodApple.should.be.jsonSchema(fruitSchema);\r\n    badApple.should.not.be.jsonSchema(fruitSchema);\r\n    \r\n    //tdd style\r\n    assert.jsonSchema(goodApple, fruitSchema);\r\n    assert.notJsonSchema(badApple, fruitSchema);\r\n\r\n## Additional API\r\n\r\nThe `tv4` instance is 'exported' as `chai.tv4` and can be accessed to add schemas for use in validations: \r\n\r\n    chai.tv4.addSchema(uri, schema);\r\n\r\nThere are other useful methods:\r\n\r\n    //retrieve infos\r\n    var list = chai.tv4.getMissingUris();\r\n    var list = chai.tv4.getMissingUris(/^https?:/);\r\n    var list = chai.tv4.getSchemaUris(/example.com/);\r\n    \r\n    var schema = chai.tv4.getSchema('http://example.com/item');\r\n    \r\n    chai.tv4.dropSchemas();\r\n\r\nFor more API methods and info on the validator see the [tv4 documentation](https://github.com/geraintluff/tv4#api).\r\n\r\n### Cyclical objects\r\n\r\nThere is a non-standard tv4 property that will be passed to the internal `tv4.validateResult()` call to enable [support for cyclical objects](https://github.com/geraintluff/tv4#cyclical-javascript-objects). It allows tv4 to validate normal javascipt structures (instead of pure JSON) without risk of entering a loop on cyclical references.\r\n\r\n    chai.tv4.cyclicCheck = true;\r\n \r\nThis is slightly slower then regular validation so it is disabled by default. \r\n\r\n### Remote references\r\n\r\nDue to the synchronous nature of assertions there will be no support for dynamically loading remote references during validation.\r\n\r\nUse the asynchronous preparation feature of your favourite test runner to preload remote schemas:\r\n\r\n    // simplified example using a bdd-style async before(); as used in mocha, jasmine etc. \r\n    before(function (done) {\r\n    \r\n    \t// add first instance manually\r\n    \tchai.tv4.addSchema(uri, schema);\r\n    \r\n    \t// retrieve the list of external uris\r\n    \tvar checkMissing = function () {\r\n    \t\tvar missing = chai.tv4.getMissingUris();\r\n    \t\tif (missing.length === 0) {\r\n    \t\t\t//all $ref's solved\r\n    \t\t\tdone();\r\n    \t\t\treturn;\r\n    \t\t}\r\n    \t\t// load a schema using your favourite JSON loader (jQuery, request, SuperAgent etc)\r\n    \t\tvar uri = missing.pop();\r\n    \t\tmyFavoriteJsonLoader.load(uri, function (err, schema) {\r\n    \t\t\tif (err || !schema) {\r\n    \t\t\t\tdone(err || 'no data loaded');\r\n    \t\t\t\treturn;\r\n    \t\t\t}\r\n    \t\t\t// add it\r\n    \t\t\tchai.tv4.addSchema(uri, schema);\r\n    \t\t\t// iterate\r\n    \t\t\tcheckMissing();\r\n    \t\t});\r\n    \t};\r\n    \t// start loading\r\n    \tcheckMissing();\r\n    });\r\n\r\n## History\r\n\r\n* 1.0.4 - Use and expose separated tv4 instance. Improved readme examples.\r\n* 1.0.3 - Published to [chaijs.com/plugins](http://chaijs.com/plugins)\r\n* 1.0.2 - Improved reporting, made compatible with standard reporters\r\n* 1.0.1 - Added basic error reporting\r\n* 1.0.0 - First release\r\n\r\n## Build\r\n\r\nInstall development dependencies in your git checkout:\r\n\r\n    $ npm install\r\n\r\nYou need the global [grunt](http://gruntjs.com) command:\r\n\r\n    $ npm install grunt-cli -g\r\n\r\nBuild and run tests:\r\n\r\n    $ grunt\r\n\r\nSee the `Gruntfile` for additional commands.\r\n\r\n## License\r\n\r\nCopyright (c) 2013 Bart van der Schoor\r\n\r\nLicensed under the MIT license.",
  "_id": "chai-json-schema@1.0.4",
  "_from": "chai-json-schema@*"
}
