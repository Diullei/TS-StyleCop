{
  "name": "grunt-execute",
  "description": "execute code in node",
  "version": "0.1.4",
  "homepage": "https://github.com/Bartvds/grunt-execute",
  "author": {
    "name": "Bart van der Schoor",
    "email": "bartvanderschoor@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "grit://github.com/Bartvds/grunt-execute.git"
  },
  "keywords": [
    "gruntplugin",
    "execute",
    "code",
    "node",
    "scripts",
    "spawn",
    "exec"
  ],
  "bugs": {
    "url": "https://github.com/Bartvds/grunt-execute/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/grunt-execute/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# grunt-execute\r\n\r\n> Grunt task to execute code in node\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-execute --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-execute');\r\n```\r\n\r\n## The \"execute\" task\r\n\r\nThe main use-case is easier testing of apps or loose bits javascript, or use code as a poor-mans grunt-task.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `execute` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  execute: {\r\n    target: {\r\n      src: ['script.js']\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n```js\r\ngrunt.initConfig({\r\n  execute: {\r\n    options: {\r\n      cwd: '.' //overide code cwd (default null uses scripts's own directory)\r\n    },\r\n    many_targets: {\r\n      src: ['apps/**/*.js', 'lib/**/index.js'] //supports globs\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n## Versions\r\n\r\n0.1.4 - ditched stdio option, show errors inline (even in webstorm)\r\n0.1.3 - basic version, colors disabled\r\n\r\n## Todo\r\n\r\n* Add options-passing support to fake CLI/env input\r\n\r\n* Add pre/post require's\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-execute@0.1.4",
  "_from": "grunt-execute@~0.1.4"
}
