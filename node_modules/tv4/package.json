{
  "name": "tv4",
  "version": "1.0.3",
  "author": {
    "name": "Geraint Luff"
  },
  "description": "A public domain JSON Schema validator for JavaScript",
  "keywords": [
    "json-schema",
    "schema",
    "validator",
    "tv4"
  ],
  "maintainers": [
    {
      "name": "Geraint Luff",
      "email": "luffgd@gmail.com",
      "url": "https://github.com/geraintluff/"
    }
  ],
  "main": "tv4.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/geraintluff/tv4.git"
  },
  "license:": [
    {
      "type": "Public Domain",
      "url": "http://geraintluff.github.io/tv4/LICENSE.txt"
    },
    {
      "type": "MIT",
      "url": "http://jsonary.com/LICENSE.txt"
    }
  ],
  "readme": "#Tiny Validator (for v4 JSON Schema)\r\n\r\nAll you need is ```tv4.js``` (24KB) or ```tv4.min.js``` (12.9KB, 3.8KB gzipped).\r\n\r\nThere is support for `$ref` with JSON Pointer fragment paths (```other-schema.json#/properties/myKey```).\r\n\r\n## Usage 1:\r\n\r\n```javascript\r\nvar valid = tv4.validate(data, schema);\r\n```\r\n\r\nIf validation returns ```false```, then an explanation of why validation failed can be found in ```tv4.error```.\r\n\r\nThe error object will look something like:\r\n```json\r\n{\r\n    \"code\": 0,\r\n    \"message\": \"Invalid type: string\",\r\n    \"dataPath\": \"/intKey\",\r\n    \"schemaKey\": \"/properties/intKey/type\"\r\n}\r\n```\r\n\r\nThe `\"code\"` property will refer to one of the values in `tv4.errorCodes` - in this case, `tv4.errorCodes.INVALID_TYPE`.\r\n\r\nTo enable external schema to be referenced, you use:\r\n```javascript\r\ntv4.addSchema(url, schema);\r\n```\r\n\r\nIf schemas are referenced (```$ref```) but not known, then validation will return ```true``` and the missing schema(s) will be listed in ```tv4.missing```.\r\n\r\n## Usage 2: Multi-threaded validation\r\n\r\nStoring the error and missing schemas does not work well in multi-threaded environments, so there is an alternative syntax:\r\n\r\n```javascript\r\nvar result = tv4.validateResult(data, schema);\r\n```\r\n\r\nThe result will look something like:\r\n```json\r\n{\r\n    \"valid\": false,\r\n    \"error\": {...},\r\n    \"missing\": [...]\r\n}\r\n```\r\n\r\n## Usage 3: Multiple errors\r\n\r\nNormally, `tv4` stops when it encounters the first validation error.  However, you can collect an array of validation errors using \r\n\r\n```javascript\r\nvar result = tv4.validateMultiple(data, schema);\r\n```\r\n\r\nThe result will look something like:\r\n```json\r\n{\r\n    \"valid\": false,\r\n    \"errors\": [\r\n        {...},\r\n        ...\r\n    ],\r\n    \"missing\": [...]\r\n}\r\n```\r\n\r\n## Asynchronous validation\r\n\r\nSupport for asynchronous validation (where missing schemas are fetched) can be added by including an extra JavaScript file.  Currently, the only version requires jQuery (`tv4.async-jquery.js`), but the code is very short and should be fairly easy to modify for other libraries (such as MooTools).\r\n\r\nUsage:\r\n\r\n```javascript\r\ntv4.validate(data, schema, function (isValid, validationError) { ... });\r\n```\r\n\r\n`validationFailure` is simply taken from `tv4.error`. \r\n\r\n## Tests\r\n\r\nThere are tests available, but they require PHP, so you can't see them on GitHub.\r\n\r\n## Minifying\r\n\r\n```tv4.min.js``` is produced using the [Google Closure Compiler](http://closure-compiler.appspot.com/home).\r\n\r\n## License\r\n\r\nThe code is available as \"public domain\", meaning that it is completely free to use, without any restrictions at all.  Read the full license [here](http://geraintluff.github.com/tv4/LICENSE.txt).\r\n\r\nIt's also available under an (MIT license](http://jsonary.com/LICENSE.txt).\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/geraintluff/tv4/issues"
  },
  "_id": "tv4@1.0.3",
  "_from": "tv4@~1.0.3"
}
